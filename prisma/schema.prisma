generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model usuario {
  id                       Int                @id @default(autoincrement())
  nome                     String
  email                    String             @unique
  senha                    String
  criadoEm                 DateTime           @default(now())
  editadoEm                DateTime           @default(now())
  deletadoEm               DateTime?
  ultimoLogin              DateTime?
  bloqueadoEm              DateTime?
  administrador            Boolean?           @default(false)
  listaProdutosResponsavel listaProdutos[]    @relation("listaProdutos_responsavel")
  listaProdutosUsuario     listaProdutos[]    @relation("listaProdutos_usuario")
  morador                  morador[]
  produto                  produto[]
  residencia               residencia[]
  rotinaResponsavel        rotina[]           @relation("rotina_responsavel")
  rotinaUsuario            rotina[]           @relation("rotina_usuario")
  tipoProduto              tipoProduto[]
  usuarioPermissao         usuarioPermissao[]
  mercado                  mercado[]
  compra                   compra[]
}

model permissao {
  id               Int                @id @default(autoincrement())
  nome             String             @unique
  descricao        String
  usuarioPermissao usuarioPermissao[]
}

model usuarioPermissao {
  id          Int       @id @default(autoincrement())
  usuarioId   Int
  permissaoId Int
  permissao   permissao @relation(fields: [permissaoId], references: [id])
  usuario     usuario   @relation(fields: [usuarioId], references: [id])
}

model residencia {
  id            Int             @id @default(autoincrement())
  nome          String
  ehFavorito    Boolean         @default(false)
  criadoEm      DateTime        @default(now())
  editadoEm     DateTime        @default(now())
  deletadoEm    DateTime?
  usuarioId     Int
  listaProdutos listaProdutos[]
  morador       morador[]
  usuario       usuario         @relation(fields: [usuarioId], references: [id])
  rotina        rotina[]
}

model morador {
  id             Int        @id @default(autoincrement())
  nome           String
  dataNascimento DateTime
  criadoEm       DateTime   @default(now())
  editadoEm      DateTime   @updatedAt
  deletadoEm     DateTime?
  residenciaId   Int
  usuarioId      Int?
  residencia     residencia @relation(fields: [residenciaId], references: [id])
  usuario        usuario?   @relation(fields: [usuarioId], references: [id])
}

model listaProdutos {
  id                  Int                   @id @default(autoincrement())
  nome                String
  observacao          String?
  residenciaId        Int?
  usuarioId           Int
  responsavelId       Int?
  residencia          residencia?           @relation(fields: [residenciaId], references: [id])
  responsavel         usuario?              @relation("listaProdutos_responsavel", fields: [responsavelId], references: [id])
  usuario             usuario               @relation("listaProdutos_usuario", fields: [usuarioId], references: [id])
  produtoListaProduto produtoListaProduto[]
}

model tipoProduto {
  id        Int       @id @default(autoincrement())
  descricao String
  usuarioId Int
  produto   produto[]
  usuario   usuario   @relation(fields: [usuarioId], references: [id])
}

model produto {
  id                  Int                   @id @default(autoincrement())
  nome                String
  tipoProdutoId       Int?
  usuarioId           Int
  observacao          String?
  criadoEm            DateTime              @default(now())
  tipoProduto         tipoProduto?          @relation(fields: [tipoProdutoId], references: [id])
  usuario             usuario               @relation(fields: [usuarioId], references: [id])
  produtoListaProduto produtoListaProduto[]
}

model statusProdutoLista {
  id                  Int                   @id @default(autoincrement())
  descricao           String
  produtoListaProduto produtoListaProduto[]
}

model mercado {
  id         Int       @id @default(autoincrement())
  nome       String
  observacao String?
  usuarioId  Int
  criadoEm   DateTime  @default(now())
  editadoEm  DateTime  @default(now()) @updatedAt
  deletadoEm DateTime?
  usuario    usuario   @relation(fields: [usuarioId], references: [id])
  compra     compra[]
}

model formaPagamento {
  id        Int      @id @default(autoincrement())
  descricao String
  compra    compra[]
}

model compra {
  id                  Int                   @id @default(autoincrement())
  observacao          String?
  formaPagamentoId    Int
  mercadoId           Int
  usuarioId           Int
  compradoEm          DateTime
  criadoEm            DateTime              @default(now())
  editadoEm           DateTime              @default(now()) @updatedAt
  deletadoEm          DateTime?
  valor               Float
  formaPagamento      formaPagamento        @relation(fields: [formaPagamentoId], references: [id])
  mercado             mercado               @relation(fields: [mercadoId], references: [id])
  usuario             usuario               @relation(fields: [usuarioId], references: [id])
  produtoListaProduto produtoListaProduto[]
}

model produtoListaProduto {
  id                   Int                @id @default(autoincrement())
  quantidade           Int
  unidade              String
  valor                Float?
  produtoId            Int
  listaProdutosId      Int
  statusProdutoListaId Int
  compraId             Int?
  listaProduto         listaProdutos      @relation(fields: [listaProdutosId], references: [id])
  produto              produto            @relation(fields: [produtoId], references: [id])
  statusProdutoLista   statusProdutoLista @relation(fields: [statusProdutoListaId], references: [id])
  compra               compra?            @relation(fields: [compraId], references: [id])
}

model rotina {
  id            Int         @id @default(autoincrement())
  nome          String
  dataInicio    String
  repeticao     String?
  criadoEm      DateTime    @default(now())
  editadoEm     DateTime    @updatedAt
  deletadoEm    DateTime?
  responsavelId Int?
  residenciaId  Int?
  usuarioId     Int
  dataTermino   String?
  intervalo     Int?
  periodo       String[]
  horaInicio    String?
  horaTermino   String?
  observacao    String?
  residencia    residencia? @relation(fields: [residenciaId], references: [id])
  responsavel   usuario?    @relation("rotina_responsavel", fields: [responsavelId], references: [id])
  usuario       usuario     @relation("rotina_usuario", fields: [usuarioId], references: [id])
}
